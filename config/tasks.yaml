# tasks.yaml (updated)

# CONTEXT: {ASL_dataset} (a mapping of known words).
finish_sentence_task:
  description: >
    INPUT: A JSON array of ASL tokens recognized by the model (WLASL style), e.g. ["TOMORROW","SCHOOL","GO","I"]. 

    ACTION: Produce one fluent English sentence that best matches the tokens' meaning.
    RULES:
      - Respect typical ASL ordering (TIME → TOPIC → COMMENT) when interpreting intent.
      - Infer minimal tense/aspect from TIME words (e.g., TOMORROW → future phrasing).
      - Do NOT invent entities not present in the tokens unless required function words for English.
      - Prefer vocabulary present in ASL_dataset; if a concept is missing, paraphrase simply.
      - Output must be a single line string (no quotes, no JSON).
    INPUT FORMAT:
      - tokens: list[str]
      - optional: user_context (short text), asl_dataset (dict or path)

    USER INPUT : {words}

  expected_output: >
    A single grammatical English sentence (string), e.g., "I will go to school tomorrow."
  agent: sentence_finisher_agent

chat_task:
  description: >
    PURPOSE:
      Produce a concise answer as a generic LLM

    INPUT:
      - message: str                  # User question or prior model output    

    ACTION:
      - Answer ONLY; do not ask a follow-up question.
      - Proper names or single-letter tokens (e.g., G, P, T) 

    RULES:
      - One-Three sentence, ≤ 15 words per each sentence.
      - Plain text only (no code blocks, no metadata, no emojis).
      - Simple syntax; avoid idioms and complex clauses.
      - Punctuation limited to a period or question mark.

  expected_output: >
    One-Three sentence (≤ 30 words per each sentence). Plain text only (no code blocks, no metadata, no emojis).

  agent: chat_model_agent

sentence_split_task:
  description: >
    You are an English-to-ASL sequence converter. Convert English sentences to ASL token sequences using ONLY the provided ASL_dataset vocabulary.

    ASL_dataset: {ASL_dataset}

    CONVERSION RULES (apply in this order):

    STEP 1 - TOKENIZATION:
    - Split sentence into individual words
    - Remove punctuation
    - Convert to uppercase
    - Keep single letters A-Z as-is

    STEP 2 - VOCABULARY MAPPING:
    - If word exists in ASL_dataset → use it directly
    - If word NOT in ASL_dataset → find closest synonym:
      * "assist/help/aid" → "HELP"
      * "question/questions/ask" → "QUESTION" 
      * "student/students/pupil" → "STUDENT"
      * "teacher/instructor" → "TEACHER"
      * "person/people/individuals" → "PEOPLE"
    - Remove function words: a, an, the, is, am, are, was, were, will, do, does, in, on, at, with, by, for
    - If no synonym exists → OMIT the word

    STEP 3 - ASL WORD ORDER:
    - TIME words first (if present): TODAY, TOMORROW, YESTERDAY, NOW, LATER
    - TOPIC-COMMENT structure: [TOPIC] [COMMENT]
    - WH-questions: move WH-word to END
      * "What is your name?" → "YOUR NAME WHAT"
      * "Where do you live?" → "YOU LIVE WHERE"

    EXAMPLES:
    Input: "I will help the students with questions"
    Step 1: ["I", "WILL", "HELP", "THE", "STUDENTS", "WITH", "QUESTIONS"]
    Step 2: ["I", "HELP", "STUDENT", "QUESTION"] (removed: will, the, with)
    Step 3: ["I", "STUDENT", "QUESTION", "HELP"] (topic-comment)
    Output: ["I", "STUDENT", "QUESTION", "HELP"]

    Input: "What is your name?"
    Step 1: ["WHAT", "IS", "YOUR", "NAME"]
    Step 2: ["WHAT", "YOUR", "NAME"] (removed: is)
    Step 3: ["YOUR", "NAME", "WHAT"] (WH-word to end)
    Output: ["YOUR", "NAME", "WHAT"]

    Input: "Tomorrow I will go to school"
    Step 1: ["TOMORROW", "I", "WILL", "GO", "TO", "SCHOOL"]
    Step 2: ["TOMORROW", "I", "GO", "SCHOOL"] (removed: will, to)
    Step 3: ["TOMORROW", "I", "SCHOOL", "GO"] (time first, topic-comment)
    Output: ["TOMORROW", "I", "SCHOOL", "GO"]

    CRITICAL REQUIREMENTS:
    - Output ONLY valid ASL_dataset tokens or single letters A-Z
    - NO fabricated or invented tokens
    - Return as JSON array format: ["TOKEN1", "TOKEN2", "TOKEN3"]
    - If input contains unprocessable words, omit them completely

    Now convert this English sentence to ASL sequence:

  expected_output: >
    Either (a) an array of arrays, one token array per sentence, in original sentence order;
    or (b) a single flat array if flat_mode=true, with a clear separator ("period" or "SENTENCE_BREAK").
    In all cases, A–Z single-letter tokens are preserved; only ASL_dataset words or valid letters appear.

  agent: sentence_splitter_agent

rearrange_word_task:
  description: >
    INPUT: An unordered or English-order list of tokens (e.g., ["I","GO","STORE","YESTERDAY"]).
    ASL_dataset: {ASL_dataset} (available tokens).
    ACTION: Re-order tokens to ASL grammar:
      - TIME first; then TOPIC; then COMMENT (verb phrase + optional pronoun).
      - Drop function words not in ASL_dataset (articles; some prepositions).
      - **Do NOT drop single-character A–Z alphabet tokens (e.g., G, P, T).**
      - For negatives, place NOT before or after the verb (COFFEE LIKE NOT I).
      - For questions, move WH to edge; yes/no remains linear (non-manual signals not represented).

    OUTPUT FORMAT:
      - A JSON array of tokens in ASL order, preserving single-character alphabet tokens.

  expected_output: >
    A JSON array reordered to ASL grammar (e.g., ["YESTERDAY","STORE","GO","I"]) and preserving alphabet tokens like ["NAME","SIGN","G","P","T"].
  agent: sentence_splitter_agent
